name: Stable Kernel CI

on:
  push:
    tags:
      - 'linux-wsl-stable-6.8.[0-9]+'

run-name: Stable Release Build ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    container: nevuly/nevuly-dev-base:arch
    env:
      TAG_VERSION: '${{ github.ref_name }}'
      ARCH: arm64
      IMAGE_NAME: Image-arm64

    steps:
      - name: Trust this directory
        run: git config --global --add safe.directory /__w/WSL2-Linux-Kernel-Rolling/WSL2-Linux-Kernel-Rolling

      - uses: actions/checkout@main

      - name: Download WSL2 stable kernel
        run: |
          git clone https://github.com/PeronGH/ARM64-WSL2-Linux-Kernel-Fixed.git --depth 1 -b $TAG_VERSION linux

      - name: Build WSL2 stable kernel
        run: |
          cd linux
          export ARCH=arm64 && export CROSS_COMPILE=aarch64-linux-gnu-
          make KCONFIG_CONFIG=arch/arm64/configs/config-wsl-arm64 -j$(echo `nproc` + 1 | bc)
          cp arch/arm64/boot/Image ../$IMAGE_NAME
          echo "Done"

      - name: Generate kernel modules package
        run: |
          echo "Check kernel version"
          IFS=- read -r var1 var2 var3 version <<< ${{ env.TAG_VERSION }}
          echo "Kernel verison: $version"
          cd linux
          echo "Download kernel modules package installer script"
          wget https://gist.githubusercontent.com/Nevuly/cf1d17db72cdfde6ed149461eef0215c/raw/b1cfb4382e1dcf58c9728b39865942cdf587f63c/modules-install.sh
          chmod 775 modules-install.sh
          echo "Generate kernel modules tarball"
          mkdir -p $IMAGE_NAME-modules_install && make modules_install INSTALL_MOD_PATH=$IMAGE_NAME-modules_install
          cp modules-install.sh $IMAGE_NAME-modules_install/
          rm -rf $IMAGE_NAME-modules_install/lib/modules/$version-WSL2-STABLE+/build
          echo "$version" >> $IMAGE_NAME-modules_install/kernel_version.txt
          tar -czf $IMAGE_NAME-modules_install.tar.gz $IMAGE_NAME-modules_install && mv $IMAGE_NAME-modules_install.tar.gz ../
          echo "Done"

      - name: Generate kernel optional package (headers, docs)
        run: |
          echo "Check kernel version"
          IFS=- read -r var1 var2 var3 version <<< ${{ env.TAG_VERSION }}
          echo "Kernel verison: $version" 
          cd linux
          echo "Download kernel optionals package installer script"
          wget https://gist.githubusercontent.com/Nevuly/b203682442ba2c6cf4cad3b35afb6f4b/raw/72cffc2e83a6c9298667a79c91cfe53bbcfcc6e1/optionals-install.sh
          chmod 775 optionals-install.sh
          echo "Generate kernel headers tarball"
          mkdir -p $IMAGE_NAME-optional_install/build
          export optional_path=$IMAGE_NAME-optional_install/build
          install -Dt "$optional_path" -m644 Makefile Module.symvers System.map vmlinux
          install -Dt "$optional_path/kernel" -m644 kernel/Makefile
          install -Dt "$optional_path/arch/arm64" -m644 arch/arm64/Makefile
          cp -t "$optional_path" -a scripts
          cp -t "$optional_path" -a include  
          cp -t "$optional_path/arch/arm64" -a arch/arm64/include
          install -Dt "$optional_path/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s
          mkdir -p "$optional_path/arch/arm"
          cp -t "$optional_path/arch/arm" -a arch/arm/include
          install -Dt "$optional_path/drivers/md" -m644 drivers/md/*.h
          install -Dt "$optional_path/net/mac80211" -m644 net/mac80211/*.h
          install -Dt "$optional_path/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h
          install -Dt "$optional_path/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
          install -Dt "$optional_path/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
          install -Dt "$optional_path/drivers/media/tuners" -m644 drivers/media/tuners/*.h
          install -Dt "$optional_path/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h
          find . -name 'Kconfig*' -exec install -Dm644 {} "$optional_path/{}" \;
          for arch in "$optional_path"/arch/*/; do
            [[ $arch = */arm64/ ]] && continue  
            echo "Removing $(basename "$arch")"
            rm -r "$arch"
          done
          rm -r $optional_path/Documentation
          find -L "$optional_path" -type l -printf 'Removing %P\n' -delete
          find -L "$optional_path" -type f -name '*.o' -printf 'Removing %P\n' -delete
          export file
          export STRIP_SHARED
          export STRIP_STATIC
          export STRIP_BINARIES
          while read -rd '' $file; do
            case "$(file -Sib "$file")" in
              application/x-sharedlib\;*)      
                strip -v $STRIP_SHARED $file ;;
              application/x-archive\;*)
                strip -v $STRIP_STATIC $file ;;
              application/x-executable\;*)
                strip -v $STRIP_BINARIES $file ;;
              application/x-pie-executable\;*)
                strip -v $STRIP_SHARED $file ;;
            esac
          done < <(find "$optional_path" -type f -perm -u+x ! -name vmlinux -print0)
          echo "Generate kernel documentations tarball"
          cp -r Documentation $optional_path/Documentation
          cp optionals-install.sh $IMAGE_NAME-optional_install/
          echo "$version" >> $IMAGE_NAME-optional_install/kernel_version.txt
          tar -czf $IMAGE_NAME-optional_install.tar.gz $IMAGE_NAME-optional_install && mv $IMAGE_NAME-optional_install.tar.gz ../
          echo "Done"

      - name: Generate sha256 Checksum  
        run: |
          sha256sum $IMAGE_NAME > $IMAGE_NAME.sha256
          sha256sum $IMAGE_NAME-modules_install.tar.gz > $IMAGE_NAME-modules_install.sha256  
          sha256sum $IMAGE_NAME-optional_install.tar.gz > $IMAGE_NAME-optional_install.sha256

      - name: Upload kernel Images
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.IMAGE_NAME }}
          path: |
            ${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME }}.sha256
            ${{ env.IMAGE_NAME }}-modules_install.tar.gz  
            ${{ env.IMAGE_NAME }}-modules_install.sha256
            ${{ env.IMAGE_NAME }}-optional_install.tar.gz
            ${{ env.IMAGE_NAME }}-optional_install.sha256

  release:
    runs-on: ubuntu-latest
    needs: build
    env:
      TAG_VERSION: '${{ github.ref_name }}'

    steps:
      - uses: actions/checkout@main
      - uses: actions/download-artifact@main
        with:
          path: release_images/

      - name: Release Kernel
        uses: softprops/action-gh-release@master
        with:
          name: ${{ env.TAG_VERSION }}
          tag_name: ${{ env.TAG_VERSION }}
          body: |
            **How to apply this kernel?**  
            Before you try to apply this kernel, You **MUST** shutdown your WSL. (wsl --shutdown)
            Check this [document](https://learn.microsoft.com/en-us/windows/wsl/wsl-config).

            **How to install kernel module package in WSL2?**
            The installation script is already contained within the kernel module package tarball.
            You can run **modules-install.sh** file with root.

            **How to install kernel optionals package in WSL2? (Optional)**
            The installation script is already contained within the kernel optionals package tarball. 
            It included kernel headers and kernel documentations.
            You can run **optionals-install.sh** file with root.

            **This kernel built on ArchLinux.**

          files: |
            release_images/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
